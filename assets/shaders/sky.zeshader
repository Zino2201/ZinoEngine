shader "Sky"
{
	struct VertexInput
	{
		float3 position : POSITION;
		float2 texcoord : TEXCOORD0;
		float3 normal : NORMAL;
	};

	struct VertexOutput
	{
		float4 position : SV_POSITION;
		float2 texcoord : TEXCOORD0;
	};

	cbuffer GlobalData : register(b0)
	{
		float4x4 world;
		float4x4 view;
		float4x4 proj;
		float time;
		float3 light_pos;
		float3 view_pos;
	};

	Texture2D texture : register(t1);
	SamplerState texture_sampler : register(s2);
	ByteAddressBuffer test : register(t3);

	vertex
	{
		VertexOutput main(VertexInput input)
		{
			VertexOutput output;

			uint coucou = test.Load(0);
			float4 world_pos = mul(float4(input.position, 1.0), world);
	        output.position = mul(world_pos, mul(view, proj));
	        output.texcoord = input.texcoord;

			return output;
		}
	}

	fragment
	{
		float4 main(VertexOutput input) : SV_TARGET0
		{
			const float gamma = 2.2;
			const float exposure = 2.5;

			/** Simple tonemapping */
			float3 color = texture.Sample(texture_sampler, input.texcoord).rgb;
			float3 mapped = 1.0 - exp(-color * exposure);
			mapped = pow(mapped, float3(1.0 / gamma, 1.0 / gamma, 1.0 / gamma));
			
            return float4(mapped, 1.0); 
		}
	}
}