shader "Sky"
{
	parameters
	{
		float4x4 wvp;
		uint texture;
		uint texture_sampler;
	}

	#include "core.hlsl"

	struct VertexInput
	{
		float3 position : POSITION;
		float2 texcoord : TEXCOORD0;
		float3 normal : NORMAL;
	};

	struct VertexOutput
	{
		float4 position : SV_POSITION;
		float2 texcoord : TEXCOORD0;
	};

	struct ShaderData
    {
		float4x4 wvp;
        uint texture;
        uint texture_sampler;
    };

    ZE_PUSH_CONSTANT ShaderData data;

	vertex
	{
		VertexOutput main(VertexInput input)
		{
			VertexOutput output;

	        output.position = mul(float4(input.position, 1.0), data.wvp);
	        output.texcoord = input.texcoord;

			return output;
		}
	}

	fragment
	{
		float4 main(VertexOutput input) : SV_TARGET0
		{
			const float gamma = 2.2;
			const float exposure = 2.5;

			Texture2D texture = get_resource<Texture2D>(data.texture);
			SamplerState texture_sampler = get_resource<SamplerState>(data.texture_sampler);

			/** Simple tonemapping */
			float3 color = texture.Sample(texture_sampler, input.texcoord).rgb;
			float3 mapped = 1.0 - exp(-color * exposure);
			mapped = pow(mapped, float3(1.0 / gamma, 1.0 / gamma, 1.0 / gamma));
			
            return float4(mapped, 1.0); 
		}
	}
}