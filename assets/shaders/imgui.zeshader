shader "ImGui"
{
	parameters
	{
		float2 translate;
		float2 scale;
		Texture2D texture;
		SamplerState texture_sampler;
	}

	#include "core.hlsl"

	struct VertexInput
	{
		float2 position : POSITION;
		float2 texcoord : TEXCOORD0;
		float4 color : TEXCOORD1;
	};

	struct VertexOutput
	{
		float4 position : SV_POSITION;
		float2 texcoord : TEXCOORD0;
		float4 color : TEXCOORD1;
	};

	struct ShaderData
    {
		float2 translate;
		float2 scale;
        uint texture;
        uint texture_sampler;
    };

    ZE_PUSH_CONSTANT ShaderData data;

	vertex
	{
		VertexOutput main(VertexInput input)
		{
			VertexOutput output;

			output.position = float4(input.position * data.scale + data.translate, 0.0, 1.0);
			output.texcoord = input.texcoord;
			output.color = input.color;

			return output;
		}
	}

	fragment
	{
		float4 main(VertexOutput input) : SV_TARGET0
		{
			Texture2D texture = get_resource<Texture2D>(data.texture);
			SamplerState sampler = get_resource<SamplerState>(data.texture_sampler);

			return input.color * texture.Sample(sampler, input.texcoord);
		}
	}
}