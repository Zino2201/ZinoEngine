shader "ScatterUpload"
{  
    parameters
    {
        uint offset;
        uint data_size;
        uint element_count;
        uint threads_per_element;
        ByteAddressBuffer upload_buffer;
        RWByteAddressBuffer dst_buffer;
    }

    compute
    {
        cbuffer GlobalData
        {
            uint offset;
            uint data_size;
            uint element_count;
            uint threads_per_element;
        };

        ByteAddressBuffer upload_buffer;
        RWByteAddressBuffer dst_buffer;

        [numthreads(64, 1, 1)]
        void main(uint thread_id : SV_DispatchThreadID)
        {
            thread_id = thread_id + offset;

            const uint element_size = data_size + sizeof(uint);
            uint element_index = thread_id / threads_per_element;

            if(element_index < element_count)
            {
                uint element_thread_offset = thread_id * threads_per_element % data_size;

                uint dst_index = upload_buffer.Load(element_index * element_size) * data_size + element_thread_offset;
                uint src_data = upload_buffer.Load(element_index * element_size + sizeof(uint) + element_thread_offset);
                dst_buffer.Store(dst_index, src_data);
            }
        }
    }
}